
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000025a  000002ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000783  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ca  00000000  00000000  00000af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bc  00000000  00000000  000011bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000006c  00000000  00000000  0000147c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000344  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014b  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001977  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 2b 01 	jmp	0x256	; 0x256 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
 #include <avr/io.h>
 #define F_CPU 16000000
 #define BUAD 19200
 #define BUAD_RATE_CALC ((F_CPU/16/BUAD) - 1)

 int main(void){
  96:	7f 92       	push	r7
  98:	8f 92       	push	r8
  9a:	9f 92       	push	r9
  9c:	af 92       	push	r10
  9e:	bf 92       	push	r11
  a0:	cf 92       	push	r12
  a2:	df 92       	push	r13
  a4:	ef 92       	push	r14
  a6:	ff 92       	push	r15
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
  b4:	63 97       	sbiw	r28, 0x13	; 19
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	f8 94       	cli
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	0f be       	out	0x3f, r0	; 63
  be:	cd bf       	out	0x3d, r28	; 61
	 char br;
	 char ar[]= "IoT Army of 300";
  c0:	80 e1       	ldi	r24, 0x10	; 16
  c2:	e0 e0       	ldi	r30, 0x00	; 0
  c4:	f1 e0       	ldi	r31, 0x01	; 1
  c6:	de 01       	movw	r26, r28
  c8:	11 96       	adiw	r26, 0x01	; 1
  ca:	01 90       	ld	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	8a 95       	dec	r24
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x34>
	 char buffer [3];
	 //High and low bits
	 UBRR0H = (BUAD_RATE_CALC >> 8);
  d2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	 UBRR0L = BUAD_RATE_CALC;
  d6:	83 e3       	ldi	r24, 0x33	; 51
  d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 ////////////////
	 //transimit and recieve enable
	 UCSR0B = (1 << TXEN0)| (1 << TXCIE0) | (1 << RXEN0) | (1 << RXCIE0);
  dc:	88 ed       	ldi	r24, 0xD8	; 216
  de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	 UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  //8 bit data format
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  e8:	ae 01       	movw	r20, r28
  ea:	4f 5f       	subi	r20, 0xFF	; 255
  ec:	5f 4f       	sbci	r21, 0xFF	; 255
	 ////////////////////////////////////////////////////////////////
	 int i = 0;

	 while (1){

		 for (i = 0; i < strlen(ar); i++){
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	ba 01       	movw	r22, r20
			 while (( UCSR0A & (1<<UDRE0))  == 0){};
  f4:	e0 ec       	ldi	r30, 0xC0	; 192
  f6:	f0 e0       	ldi	r31, 0x00	; 0
			 UDR0 = ar[i];
  f8:	06 ec       	ldi	r16, 0xC6	; 198
  fa:	10 e0       	ldi	r17, 0x00	; 0
	 ////////////////////////////////////////////////////////////////
	 int i = 0;

	 while (1){

		 for (i = 0; i < strlen(ar); i++){
  fc:	0a c0       	rjmp	.+20     	; 0x112 <main+0x7c>
			 while (( UCSR0A & (1<<UDRE0))  == 0){};
  fe:	80 81       	ld	r24, Z
 100:	85 ff       	sbrs	r24, 5
 102:	fd cf       	rjmp	.-6      	; 0xfe <main+0x68>
			 UDR0 = ar[i];
 104:	da 01       	movw	r26, r20
 106:	8d 91       	ld	r24, X+
 108:	ad 01       	movw	r20, r26
 10a:	d8 01       	movw	r26, r16
 10c:	8c 93       	st	X, r24
	 ////////////////////////////////////////////////////////////////
	 int i = 0;

	 while (1){

		 for (i = 0; i < strlen(ar); i++){
 10e:	2f 5f       	subi	r18, 0xFF	; 255
 110:	3f 4f       	sbci	r19, 0xFF	; 255
 112:	db 01       	movw	r26, r22
 114:	0d 90       	ld	r0, X+
 116:	00 20       	and	r0, r0
 118:	e9 f7       	brne	.-6      	; 0x114 <main+0x7e>
 11a:	11 97       	sbiw	r26, 0x01	; 1
 11c:	a6 1b       	sub	r26, r22
 11e:	b7 0b       	sbc	r27, r23
 120:	2a 17       	cp	r18, r26
 122:	3b 07       	cpc	r19, r27
 124:	60 f3       	brcs	.-40     	; 0xfe <main+0x68>
 126:	0f 2e       	mov	r0, r31
 128:	f4 e6       	ldi	r31, 0x64	; 100
 12a:	af 2e       	mov	r10, r31
 12c:	b1 2c       	mov	r11, r1
 12e:	f0 2d       	mov	r31, r0
			 while (( UCSR0A & (1<<UDRE0))  == 0){};
			 UDR0 = ar[i];
		 }
		 for (i = 100; i > 0; i--){
			 while (( UCSR0A & (1<<UDRE0))  == 0){};
 130:	00 ec       	ldi	r16, 0xC0	; 192
 132:	10 e0       	ldi	r17, 0x00	; 0
			 itoa(i, buffer, 10);
 134:	7e 01       	movw	r14, r28
 136:	b1 e1       	ldi	r27, 0x11	; 17
 138:	eb 0e       	add	r14, r27
 13a:	f1 1c       	adc	r15, r1
			 for(int j =0; j < strlen(buffer); j++){
 13c:	71 2c       	mov	r7, r1
 13e:	81 2c       	mov	r8, r1
				 while (( UCSR0A & (1<<UDRE0))  == 0){};
				 UDR0 = buffer[j];
 140:	0f 2e       	mov	r0, r31
 142:	f6 ec       	ldi	r31, 0xC6	; 198
 144:	cf 2e       	mov	r12, r31
 146:	d1 2c       	mov	r13, r1
 148:	f0 2d       	mov	r31, r0
			 }
			 
			 while (( UCSR0A & (1<<UDRE0))  == 0){};
			 UDR0 = 13;
 14a:	0f 2e       	mov	r0, r31
 14c:	fd e0       	ldi	r31, 0x0D	; 13
 14e:	9f 2e       	mov	r9, r31
 150:	f0 2d       	mov	r31, r0
 152:	8a 2d       	mov	r24, r10
 154:	9b 2d       	mov	r25, r11
		 for (i = 0; i < strlen(ar); i++){
			 while (( UCSR0A & (1<<UDRE0))  == 0){};
			 UDR0 = ar[i];
		 }
		 for (i = 100; i > 0; i--){
			 while (( UCSR0A & (1<<UDRE0))  == 0){};
 156:	f8 01       	movw	r30, r16
 158:	20 81       	ld	r18, Z
 15a:	25 ff       	sbrs	r18, 5
 15c:	fc cf       	rjmp	.-8      	; 0x156 <main+0xc0>
			 itoa(i, buffer, 10);
 15e:	4a e0       	ldi	r20, 0x0A	; 10
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	b7 01       	movw	r22, r14
 164:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <itoa>
 168:	d7 01       	movw	r26, r14
			 for(int j =0; j < strlen(buffer); j++){
 16a:	27 2d       	mov	r18, r7
 16c:	38 2d       	mov	r19, r8
 16e:	09 c0       	rjmp	.+18     	; 0x182 <main+0xec>
				 while (( UCSR0A & (1<<UDRE0))  == 0){};
 170:	f8 01       	movw	r30, r16
 172:	80 81       	ld	r24, Z
 174:	85 ff       	sbrs	r24, 5
 176:	fc cf       	rjmp	.-8      	; 0x170 <main+0xda>
				 UDR0 = buffer[j];
 178:	8d 91       	ld	r24, X+
 17a:	f6 01       	movw	r30, r12
 17c:	80 83       	st	Z, r24
			 UDR0 = ar[i];
		 }
		 for (i = 100; i > 0; i--){
			 while (( UCSR0A & (1<<UDRE0))  == 0){};
			 itoa(i, buffer, 10);
			 for(int j =0; j < strlen(buffer); j++){
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	3f 4f       	sbci	r19, 0xFF	; 255
 182:	f7 01       	movw	r30, r14
 184:	01 90       	ld	r0, Z+
 186:	00 20       	and	r0, r0
 188:	e9 f7       	brne	.-6      	; 0x184 <main+0xee>
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	ee 19       	sub	r30, r14
 18e:	ff 09       	sbc	r31, r15
 190:	2e 17       	cp	r18, r30
 192:	3f 07       	cpc	r19, r31
 194:	68 f3       	brcs	.-38     	; 0x170 <main+0xda>
				 while (( UCSR0A & (1<<UDRE0))  == 0){};
				 UDR0 = buffer[j];
			 }
			 
			 while (( UCSR0A & (1<<UDRE0))  == 0){};
 196:	d8 01       	movw	r26, r16
 198:	8c 91       	ld	r24, X
 19a:	85 ff       	sbrs	r24, 5
 19c:	fc cf       	rjmp	.-8      	; 0x196 <main+0x100>
			 UDR0 = 13;
 19e:	f6 01       	movw	r30, r12
 1a0:	90 82       	st	Z, r9
 1a2:	f1 e0       	ldi	r31, 0x01	; 1
 1a4:	af 1a       	sub	r10, r31
 1a6:	b1 08       	sbc	r11, r1

		 for (i = 0; i < strlen(ar); i++){
			 while (( UCSR0A & (1<<UDRE0))  == 0){};
			 UDR0 = ar[i];
		 }
		 for (i = 100; i > 0; i--){
 1a8:	a1 f6       	brne	.-88     	; 0x152 <main+0xbc>
		 }
		 return 0;
		 
	 }

 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	63 96       	adiw	r28, 0x13	; 19
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	de bf       	out	0x3e, r29	; 62
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	cd bf       	out	0x3d, r28	; 61
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	ff 90       	pop	r15
 1c4:	ef 90       	pop	r14
 1c6:	df 90       	pop	r13
 1c8:	cf 90       	pop	r12
 1ca:	bf 90       	pop	r11
 1cc:	af 90       	pop	r10
 1ce:	9f 90       	pop	r9
 1d0:	8f 90       	pop	r8
 1d2:	7f 90       	pop	r7
 1d4:	08 95       	ret

000001d6 <itoa>:
 1d6:	45 32       	cpi	r20, 0x25	; 37
 1d8:	51 05       	cpc	r21, r1
 1da:	20 f4       	brcc	.+8      	; 0x1e4 <itoa+0xe>
 1dc:	42 30       	cpi	r20, 0x02	; 2
 1de:	10 f0       	brcs	.+4      	; 0x1e4 <itoa+0xe>
 1e0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__itoa_ncheck>
 1e4:	fb 01       	movw	r30, r22
 1e6:	10 82       	st	Z, r1
 1e8:	cb 01       	movw	r24, r22
 1ea:	08 95       	ret

000001ec <__itoa_ncheck>:
 1ec:	bb 27       	eor	r27, r27
 1ee:	4a 30       	cpi	r20, 0x0A	; 10
 1f0:	31 f4       	brne	.+12     	; 0x1fe <__itoa_ncheck+0x12>
 1f2:	99 23       	and	r25, r25
 1f4:	22 f4       	brpl	.+8      	; 0x1fe <__itoa_ncheck+0x12>
 1f6:	bd e2       	ldi	r27, 0x2D	; 45
 1f8:	90 95       	com	r25
 1fa:	81 95       	neg	r24
 1fc:	9f 4f       	sbci	r25, 0xFF	; 255
 1fe:	0c 94 02 01 	jmp	0x204	; 0x204 <__utoa_common>

00000202 <__utoa_ncheck>:
 202:	bb 27       	eor	r27, r27

00000204 <__utoa_common>:
 204:	fb 01       	movw	r30, r22
 206:	55 27       	eor	r21, r21
 208:	aa 27       	eor	r26, r26
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	aa 1f       	adc	r26, r26
 210:	a4 17       	cp	r26, r20
 212:	10 f0       	brcs	.+4      	; 0x218 <__utoa_common+0x14>
 214:	a4 1b       	sub	r26, r20
 216:	83 95       	inc	r24
 218:	50 51       	subi	r21, 0x10	; 16
 21a:	b9 f7       	brne	.-18     	; 0x20a <__utoa_common+0x6>
 21c:	a0 5d       	subi	r26, 0xD0	; 208
 21e:	aa 33       	cpi	r26, 0x3A	; 58
 220:	08 f0       	brcs	.+2      	; 0x224 <__utoa_common+0x20>
 222:	a9 5d       	subi	r26, 0xD9	; 217
 224:	a1 93       	st	Z+, r26
 226:	00 97       	sbiw	r24, 0x00	; 0
 228:	79 f7       	brne	.-34     	; 0x208 <__utoa_common+0x4>
 22a:	b1 11       	cpse	r27, r1
 22c:	b1 93       	st	Z+, r27
 22e:	11 92       	st	Z+, r1
 230:	cb 01       	movw	r24, r22
 232:	0c 94 1b 01 	jmp	0x236	; 0x236 <strrev>

00000236 <strrev>:
 236:	dc 01       	movw	r26, r24
 238:	fc 01       	movw	r30, r24
 23a:	67 2f       	mov	r22, r23
 23c:	71 91       	ld	r23, Z+
 23e:	77 23       	and	r23, r23
 240:	e1 f7       	brne	.-8      	; 0x23a <strrev+0x4>
 242:	32 97       	sbiw	r30, 0x02	; 2
 244:	04 c0       	rjmp	.+8      	; 0x24e <strrev+0x18>
 246:	7c 91       	ld	r23, X
 248:	6d 93       	st	X+, r22
 24a:	70 83       	st	Z, r23
 24c:	62 91       	ld	r22, -Z
 24e:	ae 17       	cp	r26, r30
 250:	bf 07       	cpc	r27, r31
 252:	c8 f3       	brcs	.-14     	; 0x246 <strrev+0x10>
 254:	08 95       	ret

00000256 <_exit>:
 256:	f8 94       	cli

00000258 <__stop_program>:
 258:	ff cf       	rjmp	.-2      	; 0x258 <__stop_program>
