
AVR_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000112  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006dd  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000658  00000000  00000000  000008f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000235  00000000  00000000  00000f51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001188  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000340  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define F_CPU 16000000
#define BUAD 9600
#define BUAD_RATE_CALC ((F_CPU/16/BUAD) - 1)


int main(void){
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <main+0x6>
  9c:	00 d0       	rcall	.+0      	; 0x9e <main+0x8>
  9e:	00 d0       	rcall	.+0      	; 0xa0 <main+0xa>
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62

	char ar[]= "hello";
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	e0 e0       	ldi	r30, 0x00	; 0
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	de 01       	movw	r26, r28
  ac:	11 96       	adiw	r26, 0x01	; 1
  ae:	01 90       	ld	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	8a 95       	dec	r24
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x18>

	//High and low bits
	UBRR0H = (BUAD_RATE_CALC >> 8);
  b6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BUAD_RATE_CALC;
  ba:	87 e6       	ldi	r24, 0x67	; 103
  bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	////////////////
	//transimit and recieve enable
	UCSR0B = (1 << TXEN0)| (1 << TXCIE0) | (1 << RXEN0) | (1 << RXCIE0);
  c0:	88 ed       	ldi	r24, 0xD8	; 216
  c2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  //8 bit data format
  c6:	86 e0       	ldi	r24, 0x06	; 6
  c8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	////////////////////////////////////////////////////////////////
	int i = 0;

	while (1){

		while (( UCSR0A & (1<<UDRE0))  == 0){};
  cc:	a0 ec       	ldi	r26, 0xC0	; 192
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	9e 01       	movw	r18, r28
  d2:	2f 5f       	subi	r18, 0xFF	; 255
  d4:	3f 4f       	sbci	r19, 0xFF	; 255
  d6:	f1 2c       	mov	r15, r1
  d8:	70 e0       	ldi	r23, 0x00	; 0
		for (i = 0; i < strlen(ar); i++){
			UDR0 = ar[i];
  da:	06 ec       	ldi	r16, 0xC6	; 198
  dc:	10 e0       	ldi	r17, 0x00	; 0
	////////////////////////////////////////////////////////////////
	int i = 0;

	while (1){

		while (( UCSR0A & (1<<UDRE0))  == 0){};
  de:	8c 91       	ld	r24, X
  e0:	85 ff       	sbrs	r24, 5
  e2:	fd cf       	rjmp	.-6      	; 0xde <main+0x48>
  e4:	a9 01       	movw	r20, r18
  e6:	8f 2d       	mov	r24, r15
  e8:	97 2f       	mov	r25, r23
  ea:	06 c0       	rjmp	.+12     	; 0xf8 <main+0x62>
		for (i = 0; i < strlen(ar); i++){
			UDR0 = ar[i];
  ec:	fa 01       	movw	r30, r20
  ee:	61 91       	ld	r22, Z+
  f0:	af 01       	movw	r20, r30
  f2:	f8 01       	movw	r30, r16
  f4:	60 83       	st	Z, r22
	int i = 0;

	while (1){

		while (( UCSR0A & (1<<UDRE0))  == 0){};
		for (i = 0; i < strlen(ar); i++){
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	f9 01       	movw	r30, r18
  fa:	01 90       	ld	r0, Z+
  fc:	00 20       	and	r0, r0
  fe:	e9 f7       	brne	.-6      	; 0xfa <main+0x64>
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	e2 1b       	sub	r30, r18
 104:	f3 0b       	sbc	r31, r19
 106:	8e 17       	cp	r24, r30
 108:	9f 07       	cpc	r25, r31
 10a:	80 f3       	brcs	.-32     	; 0xec <main+0x56>
 10c:	e8 cf       	rjmp	.-48     	; 0xde <main+0x48>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
