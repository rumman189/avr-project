
adc_converter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000252  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000091f  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  00000c23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000366  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001748  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ee  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e0  00000000  00000000  00001ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001c86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  88:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_adc>:
char buffer[3];



void init_adc(){
	DDRB  |= 0xff;
  90:	84 b1       	in	r24, 0x04	; 4
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	84 b9       	out	0x04, r24	; 4
	ADMUX |= (1<<REFS0);
  96:	ec e7       	ldi	r30, 0x7C	; 124
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  a0:	ea e7       	ldi	r30, 0x7A	; 122
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	87 60       	ori	r24, 0x07	; 7
  a8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
  aa:	80 81       	ld	r24, Z
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
  b0:	08 95       	ret

000000b2 <init_usart>:
}

void init_usart(){
	//High and low bits
	UBRR0H = (BUAD_RATE_CALC >> 8);
  b2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BUAD_RATE_CALC;
  b6:	83 e3       	ldi	r24, 0x33	; 51
  b8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	////////////////
	//transimit and recieve enable
	UCSR0B = (1 << TXEN0)|  (1 << RXEN0) ;
  bc:	88 e1       	ldi	r24, 0x18	; 24
  be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  //8 bit data format
  c2:	86 e0       	ldi	r24, 0x06	; 6
  c4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  c8:	08 95       	ret

000000ca <read_adc>:
}

int read_adc(int channel){
	ADMUX &= 0xF0;                 
  ca:	ec e7       	ldi	r30, 0x7C	; 124
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	90 81       	ld	r25, Z
  d0:	90 7f       	andi	r25, 0xF0	; 240
  d2:	90 83       	st	Z, r25
	ADMUX |= channel;                
  d4:	90 81       	ld	r25, Z
  d6:	89 2b       	or	r24, r25
  d8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                
  da:	ea e7       	ldi	r30, 0x7A	; 122
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	80 83       	st	Z, r24
	while ( (ADCSRA &  (1<<ADSC)));
  e4:	80 81       	ld	r24, Z
  e6:	86 fd       	sbrc	r24, 6
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <read_adc+0x1a>
	return ADC;
  ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  ee:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  f2:	08 95       	ret

000000f4 <run_usart>:

void run_usart(int val){
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  f8:	4a e0       	ldi	r20, 0x0A	; 10
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	71 e0       	ldi	r23, 0x01	; 1
  fe:	0e 94 b8 00 	call	0x170	; 0x170 <__itoa_ncheck>
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b1 e0       	ldi	r27, 0x01	; 1
 106:	23 e0       	ldi	r18, 0x03	; 3
 108:	31 e0       	ldi	r19, 0x01	; 1
	itoa(val, buffer, 10);
	for(int i =0; i< 3; i++){
		while(!(UCSR0A&(1<<UDRE0))){};
 10a:	e0 ec       	ldi	r30, 0xC0	; 192
 10c:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = buffer[i];
 10e:	c6 ec       	ldi	r28, 0xC6	; 198
 110:	d0 e0       	ldi	r29, 0x00	; 0
}

void run_usart(int val){
	itoa(val, buffer, 10);
	for(int i =0; i< 3; i++){
		while(!(UCSR0A&(1<<UDRE0))){};
 112:	80 81       	ld	r24, Z
 114:	85 ff       	sbrs	r24, 5
 116:	fd cf       	rjmp	.-6      	; 0x112 <run_usart+0x1e>
		UDR0 = buffer[i];
 118:	8d 91       	ld	r24, X+
 11a:	88 83       	st	Y, r24
	return ADC;
}

void run_usart(int val){
	itoa(val, buffer, 10);
	for(int i =0; i< 3; i++){
 11c:	a2 17       	cp	r26, r18
 11e:	b3 07       	cpc	r27, r19
 120:	c1 f7       	brne	.-16     	; 0x112 <run_usart+0x1e>
		while(!(UCSR0A&(1<<UDRE0))){};
		UDR0 = buffer[i];
		
	}
	while(!(UCSR0A&(1<<UDRE0))){};
 122:	e0 ec       	ldi	r30, 0xC0	; 192
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	85 ff       	sbrs	r24, 5
 12a:	fd cf       	rjmp	.-6      	; 0x126 <run_usart+0x32>
	UDR0 = 13;
 12c:	8d e0       	ldi	r24, 0x0D	; 13
 12e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	83 ec       	ldi	r24, 0xC3	; 195
 136:	99 e0       	ldi	r25, 0x09	; 9
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <run_usart+0x44>
 140:	00 c0       	rjmp	.+0      	; 0x142 <run_usart+0x4e>
 142:	00 00       	nop
	_delay_ms(200);
}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <main>:

int main(void) {
	init_usart();
 14a:	0e 94 59 00 	call	0xb2	; 0xb2 <init_usart>
	init_adc();
 14e:	0e 94 48 00 	call	0x90	; 0x90 <init_adc>
	
	while(1) {
		int adc = read_adc(0);
		
		if (adc > 512){
			PORTB = (1<<PORTB0);
 152:	c1 e0       	ldi	r28, 0x01	; 1
int main(void) {
	init_usart();
	init_adc();
	
	while(1) {
		int adc = read_adc(0);
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 65 00 	call	0xca	; 0xca <read_adc>
		
		if (adc > 512){
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	22 e0       	ldi	r18, 0x02	; 2
 160:	92 07       	cpc	r25, r18
 162:	14 f0       	brlt	.+4      	; 0x168 <main+0x1e>
			PORTB = (1<<PORTB0);
 164:	c5 b9       	out	0x05, r28	; 5
 166:	01 c0       	rjmp	.+2      	; 0x16a <main+0x20>
		}
		else{
			PORTB &= ~(1<<PORTB0);
 168:	28 98       	cbi	0x05, 0	; 5
		}
		
		run_usart(adc);
 16a:	0e 94 7a 00 	call	0xf4	; 0xf4 <run_usart>
	}
 16e:	f2 cf       	rjmp	.-28     	; 0x154 <main+0xa>

00000170 <__itoa_ncheck>:
 170:	bb 27       	eor	r27, r27
 172:	4a 30       	cpi	r20, 0x0A	; 10
 174:	31 f4       	brne	.+12     	; 0x182 <__itoa_ncheck+0x12>
 176:	99 23       	and	r25, r25
 178:	22 f4       	brpl	.+8      	; 0x182 <__itoa_ncheck+0x12>
 17a:	bd e2       	ldi	r27, 0x2D	; 45
 17c:	90 95       	com	r25
 17e:	81 95       	neg	r24
 180:	9f 4f       	sbci	r25, 0xFF	; 255
 182:	0c 94 c4 00 	jmp	0x188	; 0x188 <__utoa_common>

00000186 <__utoa_ncheck>:
 186:	bb 27       	eor	r27, r27

00000188 <__utoa_common>:
 188:	fb 01       	movw	r30, r22
 18a:	55 27       	eor	r21, r21
 18c:	aa 27       	eor	r26, r26
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	aa 1f       	adc	r26, r26
 194:	a4 17       	cp	r26, r20
 196:	10 f0       	brcs	.+4      	; 0x19c <__utoa_common+0x14>
 198:	a4 1b       	sub	r26, r20
 19a:	83 95       	inc	r24
 19c:	50 51       	subi	r21, 0x10	; 16
 19e:	b9 f7       	brne	.-18     	; 0x18e <__utoa_common+0x6>
 1a0:	a0 5d       	subi	r26, 0xD0	; 208
 1a2:	aa 33       	cpi	r26, 0x3A	; 58
 1a4:	08 f0       	brcs	.+2      	; 0x1a8 <__utoa_common+0x20>
 1a6:	a9 5d       	subi	r26, 0xD9	; 217
 1a8:	a1 93       	st	Z+, r26
 1aa:	00 97       	sbiw	r24, 0x00	; 0
 1ac:	79 f7       	brne	.-34     	; 0x18c <__utoa_common+0x4>
 1ae:	b1 11       	cpse	r27, r1
 1b0:	b1 93       	st	Z+, r27
 1b2:	11 92       	st	Z+, r1
 1b4:	cb 01       	movw	r24, r22
 1b6:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <strrev>

000001ba <strrev>:
 1ba:	dc 01       	movw	r26, r24
 1bc:	fc 01       	movw	r30, r24
 1be:	67 2f       	mov	r22, r23
 1c0:	71 91       	ld	r23, Z+
 1c2:	77 23       	and	r23, r23
 1c4:	e1 f7       	brne	.-8      	; 0x1be <strrev+0x4>
 1c6:	32 97       	sbiw	r30, 0x02	; 2
 1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <strrev+0x18>
 1ca:	7c 91       	ld	r23, X
 1cc:	6d 93       	st	X+, r22
 1ce:	70 83       	st	Z, r23
 1d0:	62 91       	ld	r22, -Z
 1d2:	ae 17       	cp	r26, r30
 1d4:	bf 07       	cpc	r27, r31
 1d6:	c8 f3       	brcs	.-14     	; 0x1ca <strrev+0x10>
 1d8:	08 95       	ret

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
